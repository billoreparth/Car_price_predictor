 # -*- coding: utf-8 -*-
"""car_price_predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eVpXPiwql5ajxGL59DkR1-k6kRuWfUWJ
"""

import pandas as pd
import numpy as np
import pickle

car=pd.read_csv('/content/quikr_car.csv')
car.head()

"""cleaning the dataset"""

backup=car.copy()

car=car[car['year'].str.isnumeric()]

car['year']=car['year'].astype(int)

car=car[car['Price']!='Ask For Price']

car['Price']=car['Price'].str.replace(',','').astype(int)

car=car[car['kms_driven']!='Petrol']

car['kms_driven']=car['kms_driven'].str.split(' ').str.get(0).str.replace(',','').astype(int)

car=car[~car['fuel_type'].isna()]

car['name']=backup['name'] # somehow data got removed for car so backing it up

car['name']=car['name'].str.split(' ').str.slice(0,3).str.join(' ')

car=car.reset_index(drop=True)

car.describe() # here a car has a lot higher price than most so its a outlier

car=car[car['Price']<6e6]

car.describe()

car.to_csv('cleaned_car_data.csv') # saving the cleaned data

"""making model"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline

x=car.drop(columns='Price')
y=car['Price']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

ohe=OneHotEncoder()
ohe.fit(x[['name','company','fuel_type']])

column_trans=make_column_transformer((OneHotEncoder(categories=ohe.categories_),['name','company','fuel_type']),remainder='passthrough',force_int_remainder_cols=False)

lr=LinearRegression()

pipe=make_pipeline(column_trans,lr)

pipe.fit(x_train,y_train)

y_pred=pipe.predict(x_test)

r2_score(y_test,y_pred)

"""here r2 score is less so we are going to try different random state to find highest score test"""

score=[]
for i in range(1000):
  x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=i)
  lr=LinearRegression()
  pipe=make_pipeline(column_trans,lr)
  pipe.fit(x_train,y_train)
  y_pred=pipe.predict(x_test)
  score.append(r2_score(y_test,y_pred))

np.argmax(score)# here high score is 433 so we are going to give this state

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=433)
lr=LinearRegression()
pipe=make_pipeline(column_trans,lr)
pipe.fit(x_train,y_train)
y_pred=pipe.predict(x_test)

r2_score(y_test,y_pred)

pickle.dump(pipe,open('LinearRegresionModel.pkl','wb'))

ohe.categories_